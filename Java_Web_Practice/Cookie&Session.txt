1.Cookie&Session

  会话技术在开发中应用非常广泛,主要包括cookie和session技术。
  1. 会话：一次会话中包含多次请求和响应。 
  2. * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止 
  功能：在一次会话的范围内的多次请求间，共享数据 
  方式： 1. 客户端会话技术：Cookie 2. 服务器端会话技术：Session 

  通过这个案例，大家要清楚cookie在服务器端创建,然后响应给浏览器,在浏览器端保存。


2.会话技术_Cookie_原理分析
  cookie的原理底层其实通过请求头和响应头信息实现的.


3.会话技术_Cookie_细节1_发送多个Cookie
	浏览器端可以一次性保存多个cookie,那么在服务器端就可以向浏览器响应多个cookie,
	这个过程是响应过程,所以得使用response对象响应给客户端浏览器
 
  response的addCookie()方法,就可以向浏览器响应cookie


4.会话技术_Cookie_细节2_Cookie存活时间
	cookie分为两类:
	* 会话级别的cookie,浏览器关闭,cookie对象销毁
	* 持久化cookie,需要设置cookie的存活时间.

	cookie对象的setMaxAge方法的设置时间为0,这个0的含义就是杀死cookie

5.会话技术_Cookie_细节3_Cookie存储中文
	cookie里面不能保存中文,如果要保存中文,需要将中文转成cookie识别的字符,常用的有URLEncode和URLDecode这两个类.


6.会话技术_Cookie_细节4_Cookie共享 
	cookie的共享,其实就是归还cookie,这和cookie的域名和路径有关.
	这一段内容,其实就是告诉大家cookie是否提交到服务器端,这和cookie的路径设置和cookie的域名设置有关.

7.jsp是动态资源技术,它的核心本质是servlet.
    1. 	概念： * Java Server Pages： java服务器端页面 					 
           * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码 
	   *  用于简化书写！！！


8.jsp的本质是servlet,具体过程在第一次访问jsp时,被编译成一个java类,继承HttpJspBase,它最终继承HttpServlet.


9.JSP_脚本

jsp本质是一个类,说明这个jsp里面可以说书写java代码,具体书写方式有三种

Jsp里面书写java代码的三种方式 

    1. <% 代码 %>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。 
    2. <%! 代码 %>：定义的java代码，在jsp转换后的java类的成员位置。 
    3. <%= 代码 %>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。 

10.jsp的内置对象,不需要手动创建,可以直接拿来使用.

11.会话技术_Session_原理分析
    session的底层实现,依赖会话级别的cookie,浏览器关闭,session对象就找不到了.因为session依赖的cookie不存在了.
    session是否可以使用 ,依赖会话级别的cookie,当然我们可以克隆一样的cookie,保证session对象可以使用
    克隆的cookie的名称一定要和会话级别的cookie保证一致.
   
    session的钝化和活化,就是一个序列化和反序列化的一个过程.
  	* session的钝化：
	* 在服务器正常关闭之前，将session对象系列化到硬盘上
	* session的活化：
	* 在服务器启动后，将session文件转化为内存中的session对象即可。
   
12.会话技术_Session_特点 
     session在服务器端保存,数据大小也没有控制,比如显示用户名名称,购物车案例可以通过session来保存数据.

13.cookie和session的区别
    * session与Cookie的区别：
	1. session存储数据在服务器端，Cookie在客户端
	2. session没有数据大小限制，Cookie有
	3. session数据安全，Cookie相对于不安全
