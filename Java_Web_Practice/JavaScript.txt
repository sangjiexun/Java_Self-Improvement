1.javascript是什么,一种客户端脚本语法,作用与html交互。
  Javascript:客户端脚本语言,作用与html交互,让页面具有动态效果,增强用户体验

2.javascript经过不断的发展,基本组成部分有bom对象,dom对象,以及基本语法组成。  引入方式和css基本一样.

3.五种原始类型有哪些？
   Number
   String
   Null
   Boolean
   undefined 
   
4.js是一门弱类型脚本语法,所有的定义变量都用var接收
  js是弱类型客户端编程语言,区分和强类型编程语言的区别.
  
5.在java里面可以使用instanceof 来判断类型,在js里面可以使用typeof判断变量的类型

6.js里面的定义变量,决定是全局变量,还是局部变量,取决于变量的位置.

7.JavaScript_对象_Function
       //1.创建方式1
        var fun1 = new Function("a","b","c","alert(a);");
       //调用方法
       // fun1(3,4);
       // alert(fun1.length);
       //2. 创建方式2
        function fun2(a , b){
            alert(a + b);
        }

        //fun2(3,4);

        //alert(fun2.length);
        var fun3 = function(a,b){
            alert(a+b);

        }
        //alert(fun3.length);
       // fun3(3,4);


        /*fun2 = function(a , b){
            alert(a - b);
        }*/
        function fun2(a , b){
            //alert(a - b);
            alert(a);
            alert(b);
        }

        //fun2(3,4);

        //方法调用
        //fun2(1,2);
        //fun2(1);
        //fun2();
        //fun2(1,2,3);

        /*
         * 求两个数的和
         */
        /*function  add(a , b){
            return a + b;
        }*/
        /**
         * 求任意个数的和
         */
        function add (){
           var sum = 0;
            for (var i = 0; i < arguments.length; i++) {
                sum += arguments[i];
            }
            return sum;
        }

        var sum = add(1,2,3,4);
        alert(sum);
        //add(1,3);
        
8.JavaScript_对象_Array
    在js里面要想使用数组,首先创建数组对象,创建方式大体有四种,js里面数组的长度不是固定的.

9.Date对象,是日期对象,在js里面同样获取系统时间.
	var date = new Date();

        document.write(date + "<br>");

        document.write(date.toLocaleString() + "<br>");

        document.write(date.getTime() + "<br>");

10. Math对象可以进行 
    获取随机数,四舍五入,向上取整和向下取整的方法.
    Math：数学对象
                1. 创建：
                    * 特点：Math对象不用创建，直接使用。  Math.方法名();

                2. 方法：
                    random():返回 0 ~ 1 之间的随机数。 含0不含1(左闭右开)
                    ceil(x)：对数进行上舍入。
                    floor(x)：对数进行下舍入。
                    round(x)：把数四舍五入为最接近的整数。
                3. 属性：
                    PI
    
 	 /**
         * 取 1~100之间的随机整数
         *      1. Math.random()产生随机数：范围 [0,1)小数
         *      2. 乘以 100 --> [0,99.9999] 小数
         *      3. 舍弃小数部分 ：floor --> [0,99] 整数
         *      4. +1 -->[0,99] 整数 [1,100]
         *
         *
         */

       var number =  Math.floor((Math.random() * 100)) + 1;
       document.write(number);

11.JavaScript_对象_RegExp

	var reg = new RegExp("^\\w{6,12}$");
	//注意这个地方 要加一个转译符"\",以^开始 以$为结束。
       
        var reg2= /^\w{6,12}$/;
	
        /*alert(reg);
        alert(reg2);*/

        var username = "zhangsan";

        //验证
        var flag = reg.test(username);
        alert(flag);

12.JavaScript_对象_Global
   js里面的全局对象,就是可以不用创建对象,可以直接拿来使用,所以在调用全局对象的方法时,可以不用写对象
   
13.DOM简单学习
    • 控制html文档的内容 
    • 获取页面标签(元素)对象：Element 
    * 操作Element对象：
	1. 修改属性值：
		1. 明确获取的对象是哪一个？
		2. 查看API文档，找其中有哪些属性可以设置
	2. 修改标签体内容：
		* 属性：innerHTML
		1. 获取元素对象
		2. 使用innerHTML属性修改标签体内容

14.事件简单学习 
   js中事件比如点击,敲打键盘都是事件等,用途就是-->触发函数
   * 功能： 某些组件被执行了某些操作后，触发某些代码的执行。
	* 造句：  xxx被xxx,我就xxx
		* 我方水晶被摧毁后，我就责备对友。
		* 敌方水晶被摧毁后，我就夸奖自己。

* 如何绑定事件
	1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码
		1. 事件：onclick--- 单击事件

	2. 通过js获取元素对象，指定事件属性，设置一个函数

	* 代码：
		<body>
			<img id="light" src="img/off.gif"  				onclick="fun();">
			<img id="light2" src="img/off.gif">
			
			<script>
			    function fun(){
			        alert('我被点了');
			        alert('我又被点了');
			    }
			
			    function fun2(){
			        alert('咋老点我？');
			    }
			
			    //1.获取light2对象
			    var light2 = 					document.getElementById("light2");
			    //2.绑定事件
			    light2.onclick = fun2;

	flag:当两个情况之间没有具体的界限或者明确的切换条件时 使用flag 来手动进行区分
	
15.BOM_概述

   bom指的就是浏览器对象,来操作浏览器的

    1.概念：Browser Object Model 浏览器对象模型 * 将浏览器的各个组成部分封装成对象。 
    2.组成： 
	 * Window：窗口对象 
	 * Navigator：浏览器对象 
	 * Screen：显示器屏幕对象 
	 * History：历史记录对象 
	 * Location：地址栏对象 	

	window对象常见的弹出框有警告框, 输入框和确认框


16.BOM_Window_打开关闭方法
   window对象打开和关闭窗口的方法也很常见,一个是open,一个是close

17.BOM_Window_定时器方法
   window对象的定时器 ,通过定时来间隔时间调用函数

18.
    Window：窗口对象
    1. 创建
    2. 方法
         1. 与弹出框有关的方法：
            alert()	显示带有一段消息和一个确认按钮的警告框。
            confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。
                * 如果用户点击确定按钮，则方法返回true
                * 如果用户点击取消按钮，则方法返回false
            prompt()	显示可提示用户输入的对话框。
                * 返回值：获取用户输入的值
         2. 与打开关闭有关的方法：
            close()	关闭浏览器窗口。
                * 谁调用我 ，我关谁
            open()	打开一个新的浏览器窗口
                * 返回新的Window对象
         3. 与定时器有关的方式
            setTimeout()	在指定的毫秒数后调用函数或计算表达式。
                * 参数：
                    1. js代码或者方法对象
                    2. 毫秒值
                * 返回值：唯一标识，用于取消定时器
            clearTimeout()	取消由 setTimeout() 方法设置的 timeout。

            setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。
            clearInterval()	取消由 setInterval() 设置的 timeout。

    3. 属性：
        1. 获取其他BOM对象：
            history
            location
            Navigator
            Screen:
        2. 获取DOM对象
            document
    4. 特点
        * Window对象不需要创建可以直接使用 window使用。 window.方法名();
        * window引用可以省略。  方法名();


    Location：地址栏对象
	1. 创建(获取)：
		1. window.location
		2. location

	2. 方法：
		* reload()	重新加载当前文档。刷新
	3. 属性
		* href	设置或返回完整的 URL。


   History：历史记录对象
    1. 创建(获取)：
        1. window.history
        2. history

    2. 方法：
        * back()	加载 history 列表中的前一个 URL。
        * forward()	加载 history 列表中的下一个 URL。
        * go(参数)	加载 history 列表中的某个具体页面。
            * 参数：
                * 正数：前进几个历史记录
                * 负数：后退几个历史记录
    3. 属性：
        * length	返回当前窗口历史列表中的 URL 数量。




    轮播图_案例

	<!DOCTYPE html>
	<html lang="en">
	<head>
   	<meta charset="UTF-8">
        <title>轮播图</title>
	</head>
	<body>

        <img id="img" src="img/banner_1.jpg" width="100%">

        <script>
        /*
            分析：
                1.在页面上使用img标签展示图片
                2.定义一个方法，修改图片对象的src属性
                3.定义一个定时器，每隔3秒调用方法一次。


         */


        //修改图片src属性
        var number = 1;
        function fun(){
            number ++ ;
            //判断number是否大于3
            if(number > 3){
                number = 1;
            }
            //获取img对象
            var img = document.getElementById("img");
            img.src = "img/banner_"+number+".jpg";
        }

        //2.定义定时器
        setInterval(fun,3000);

        </script>
	</body>
	</html>
	</script>
	</body>

19.自动跳转页 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>自动跳转</title>
    <style>
        p{
            text-align: center;
        }
        span{
            color:red;
        }

    </style>


</head>
<body>
    <p><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>自动跳转</title>
    <style>
        p{
            text-align: center;
        }
        span{
            color:red;
        }

    </style>


</head>
<body>
    <p>
        <span id="time">5</span>秒之后，自动跳转到首页...
    </p>


    <script>
        /*
            分析：
               1.显示页面效果  <p>
               2.倒计时读秒效果实现
                   2.1 定义一个方法，获取span标签，修改span标签体内容，时间--
                   2.2 定义一个定时器，1秒执行一次该方法
               3.在方法中判断时间如果<= 0 ，则跳转到首页

         */
       // 2.倒计时读秒效果实现

        var second = 5;
        var time = document.getElementById("time");

        //定义一个方法，获取span标签，修改span标签体内容，时间--
        function showTime(){
            second -- ;
            //判断时间如果<= 0 ，则跳转到首页
            if(second <= 0){
                //跳转到首页
                location.href = "https://www.baidu.com";
            }

            time.innerHTML = second +"";
        }


        //设置定时器，1秒执行一次该方法
        setInterval(showTime,1000);



    </script>
</body>
</html>    
        <span id="time">5</span>秒之后，自动跳转到首页...
    </p>


    <script>
        /*
            分析：
               1.显示页面效果  <p>
               2.倒计时读秒效果实现
                   2.1 定义一个方法，获取span标签，修改span标签体内容，时间--
                   2.2 定义一个定时器，1秒执行一次该方法
               3.在方法中判断时间如果<= 0 ，则跳转到首页

         */
       // 2.倒计时读秒效果实现

        var second = 5;
        var time = document.getElementById("time");

        //定义一个方法，获取span标签，修改span标签体内容，时间--
        function showTime(){
            second -- ;
            //判断时间如果<= 0 ，则跳转到首页
            if(second <= 0){
                //跳转到首页
                location.href = "https://www.baidu.com";
            }

            time.innerHTML = second +"";
        }


        //设置定时器，1秒执行一次该方法
        setInterval(showTime,1000);



    </script>
</body>
</html>    


20.Dom就是文档对象,用来操作文档的
	Document Object Model 文档对象模型 
	* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作 

	在html文档里面,要想操作html标签,首先要获取标签对象,获取标签对象常用的三种方式.

	获取Elment对象的方法 

    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <title>Document对象</title>
    </head>
    <body>


    <div id="div1">div1</div>
    <div id="div2">div2</div>

    <div id="div3">div3</div>

    <div class="cls1">div4</div>
    <div class="cls1">div5</div>

    <input type="text" name="username">

	<script>
    /*
    Document：文档对象
        1. 创建(获取)：在html dom模型中可以使用window对象来获取
            1. window.document
            2. document
        2. 方法：
            1. 获取Element对象：
                1. getElementById()	： 根据id属性值获取元素对象。id属性值一般唯一
                2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组
                3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组
                4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组
            2. 创建其他DOM对象：
                createAttribute(name)
                createComment()
                createElement()
                createTextNode()
        3. 属性



     */

    //2.根据元素名称获取元素对象们。返回值是一个数组
    var divs = document.getElementsByTagName("div");
    //alert(divs.length);
    //3.根据Class属性值获取元素对象们。返回值是一个数组
    var div_cls = document.getElementsByClassName("cls1");
   // alert(div_cls.length);
    //4.根据name属性值获取元素对象们。返回值是一个数组
    var ele_username = document.getElementsByName("username");
    //alert(ele_username.length);

    var table = document.createElement("table");
    alert(table);


	</script>
	</body>
	</html>

21.Element对象的操作属性的方法

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Element对象</title>
</head>
<body>
    <a>点我试一试</a>
    <input type="button" id="btn_set" value="设置属性">
    <input type="button" id="btn_remove" value="删除属性">

<script>

    //获取btn
    var btn_set =document.getElementById("btn_set");
    btn_set.onclick = function(){
        //1.获取a标签
        var element_a = document.getElementsByTagName("a")[0];
        element_a.setAttribute("href","https://www.baidu.com");
    }


    //获取btn
    var btn_remove =document.getElementById("btn_remove");
    btn_remove.onclick = function(){
        //1.获取a标签
        var element_a = document.getElementsByTagName("a")[0];
        element_a.removeAttribute("href");
    }


    
</script>
</body>
</html>

22.Node对象,又称节点对象,是所有对象的父对象,包括Dom对象.
 	Node：节点对象，其他5个的父对象
		* 特点：所有dom对象都可以被认为是一个节点
		* 方法：
			* CRUD dom树：
				* appendChild()：向节点的子节点列表的结尾添加新的子节点。
				* removeChild()	：删除（并返回）当前节点的指定子节点。
				* replaceChild()：用新节点替换一个子节点。
		* 属性：
			* parentNode 返回节点的父节点。

23.大家一定要明白innerHTML属性,这个属性只有块级标签才有,比如div和span
24.事件监听机制
* 概念：某些组件被执行了某些操作后，触发某些代码的执行。	
	* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了
	* 事件源：组件。如： 按钮 文本输入框...
	* 监听器：代码。
	* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。

	* 常见的事件：
	1. 点击事件：
		1. onclick：单击事件
		2. ondblclick：双击事件
	2. 焦点事件
		1. onblur：失去焦点
		2. onfocus:元素获得焦点。

	3. 加载事件：
		1. onload：一张页面或一幅图像完成加载。

	4. 鼠标事件：
		1. onmousedown	鼠标按钮被按下。
		2. onmouseup	鼠标按键被松开。
		3. onmousemove	鼠标被移动。
		4. onmouseover	鼠标移到某元素之上。
		5. onmouseout	鼠标从某元素移开。
		
		
	5. 键盘事件：
		1. onkeydown	某个键盘按键被按下。	
		2. onkeyup		某个键盘按键被松开。
		3. onkeypress	某个键盘按键被按下并松开。

	6. 选择和改变
		1. onchange	域的内容被改变。
		2. onselect	文本被选中。

	7. 表单事件：
		1. onsubmit	确认按钮被点击。
		2. onreset	重置按钮被点击。
